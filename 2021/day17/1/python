#!/usr/bin/env python3
  
import sys

# Debug function
def debug(output):
  print(output)
#end debug()

# CLI arg, input file
if len(sys.argv) != 2:
  print("ERR: Expect =1 arg; the file containing input")
  exit(1)
#end if
try:
  with open(sys.argv[1], 'r') as input:
    lines = input.readlines()
except:
  print("ERR: Failed to open input file (%s)" % sys.argv[1])
  exit(1)
#end try

# Nuke those newlines
lines = [line.strip() for line in lines]

# Debug function, for easier printing
def print_r(lst):
  length_list = [len(str(element)) for row in lst for element in row]
  column_width = max(length_list)
  for row in lst:
    row = "".join(str(element).rjust(column_width + 2) for element in row)
    print(row)
#end print_r()


#
# The Meat

def display():
  return
#end display()

def step():
  # The probe's x position increases by its x velocity.
  # The probe's y position increases by its y velocity.
  # Due to drag, the probe's x velocity trends 1 toward 0
  # Due to gravity, the probe's y velocity decreases by 1.  
  global xPos
  global yPos
  global deltaX
  global deltaY
  xPos += deltaX
  yPos += deltaY
  if deltaX > 0:
    deltaX -= 1
  deltaY -= 1
#end step()

def simulate(spdX,spdY):
  return
#end simulate()

# The probe's x,y position starts at 0,0
# Target area:
minX=int(lines[0].split('=')[1].split('.')[0])
maxX=int(lines[0].split('=')[1].split('.')[2].split(',')[0])
minY=int(lines[0].split('=')[2].split('.')[0])
maxY=int(lines[0].split('=')[2].split('.')[2])

xPos=0
yPos=0

#deltaX=
#deltaY=

# 834 is too low


# Since Y both slows & speeds(downward) at the same speeds, an initial
#   Y speed of +i upward, will end up being -(i+1) downward when the
#   projectile comes back down, and passes Y=0.
# So, to hit a target of Y=-110..-69, then at Y=0 you must have initial
#   velocity <= +109, or you'll definitely overshoot on the way down.

# Gauss's sum of consecutive numbers:
# (n / 2)(first number + last number) = sum
# 109+108+...+2+1(+0) = altitude
# (109 numbers/2) * (1+109)
# 5995

yVel = abs(minY) - 1
print((yVel/2)*(1+yVel))
