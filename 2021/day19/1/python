#!/usr/bin/env python3
  
import sys

# Debug function
def debug(output):
  print(output)
#end debug()

# CLI arg, input file
if len(sys.argv) != 2:
  print("ERR: Expect =1 arg; the file containing input")
  exit(1)
#end if
try:
  with open(sys.argv[1], 'r') as input:
    lines = input.readlines()
except:
  print("ERR: Failed to open input file (%s)" % sys.argv[1])
  exit(1)
#end try

# Nuke those newlines & blank lines
lines = [line.strip() for line in lines if line != "\n"]

# Debug function, for easier printing
def print_r(lst):
  length_list = [len(str(element)) for row in lst for element in row]
  column_width = max(length_list)
  for row in lst:
    row = "".join(str(element).rjust(column_width + 2) for element in row)
    print(row)
#end print_r()


#
# The Meat
scanners = []
for line in lines:
  # --- scanner 0 ---
  if "scanner" in line:
    index = int(line.split()[2])
    scanners.append([])
    continue
  scanners[index].append([int(coord) for coord in line.split(",")])
#end for

# Convert radial point coords
# Find the most negative of all points to get the corner of a 3d bounding box
# Convert each point to manhattan distance from that corner
# Repeat for other 5 corners
# Then, find 2 points that share 12 common manhattan distances


def getCornerManhattans(scanner):
  # Take a sensor's raw data points
  # Calculate the minimum bounding box around those points
  # From each of 8 corners, calculate manhattan distance to each point & sort
  # Use that list of 8 distance-lists as the new "sensor"
  min0 = min([ coord[0] for coord in scanner ])
  min1 = min([ coord[1] for coord in scanner ])
  min2 = min([ coord[2] for coord in scanner ])
  max0 = max([ coord[0] for coord in scanner ])
  max1 = max([ coord[1] for coord in scanner ])
  max2 = max([ coord[2] for coord in scanner ])
  corners = []
  corners.append([min0,min1,min2])
  corners.append([min0,min1,max2])
  corners.append([min0,max1,min2])
  corners.append([min0,max1,max2])
  corners.append([max0,min1,min2])
  corners.append([max0,min1,max2])
  corners.append([max0,max1,min2])
  corners.append([max0,max1,max2])
  manhattanEight = []
  for corner in corners:
    manhattans = []
    for beacon in scanner:
      manhattans.append( abs(beacon[0]-corner[0]) + 
                         abs(beacon[1]-corner[1]) +
                         abs(beacon[2]-corner[2]) )
      manhattans.sort()
    #end for
    manhattanEight.append(manhattans)
  #end for
#end getCornerManhattans()








