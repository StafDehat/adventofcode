#!/usr/bin/env python3
  
import sys

# Debug function
def debug(output):
  print(output)
#end debug()

# CLI arg, input file
if len(sys.argv) != 2:
  print("ERR: Expect =1 arg; the file containing input")
  exit(1)
#end if
try:
  with open(sys.argv[1], 'r') as input:
    lines = input.readlines()
except:
  print("ERR: Failed to open input file (%s)" % sys.argv[1])
  exit(1)
#end try

# Nuke those newlines
lines = [line.strip() for line in lines]

# Debug function, for easier printing
def print_r(lst):
  length_list = [len(str(element)) for row in lst for element in row]
  column_width = max(length_list)
  for row in lst:
    row = "".join(str(element).rjust(column_width + 2) for element in row)
    print(row)
#end print_r()


#
# The Meat
def display(nums):
  for num in nums:
    print(num)
#end display()

def addition(num1,num2):
  return reduce([num1,num2])
#end addition()

def depth(x):
  #depth = lambda L: isinstance(L, list) and max(map(depth, L))+1
  if isinstance(x,list):
    return max(map(depth,x))+1
  return 0
#end depth()

def largest(x):
  if isinstance(x, int):
    return x
  return max(map(largest,x))
#end largest()

def reduce(pair):
  newPair = pair
  while True:
    # If any pair is nested inside four pairs, the leftmost such pair explodes.
    # If any regular number is 10 or greater, the leftmost such regular number splits.
    if willExplode(newPair,0):
      newPair = explode(newPair,0)
      continue
    if willSplit(newPair):
      newPair = split(newPair)
      continue
    break
  #end while
  return pair
#end reduce()

def willExplode(x,curDepth):
  if depth(x)+curDepth > 4:
    return True
  return False
#end willExplode()

def willSplit(num):
  if largest(num) >= 10:
    return True
  return False
#end willSplit()

def addToLeft(num,lst):
  # A list of 2x ints, under 4 other lists, will explode
  if isinstance(x,list):
    left = x[0]
    right = x[1]
  return lst + num
#end addToLeft()

def explode(x,xDepth):
  # A list of 2x ints, under 4 other lists, will explode
  if isinstance(x,list):
    left = x[0]
    right = x[1]
    if willExplode(left,xDepth+1):
      if depth(left) == 1:
        # 'left' explodes
        return 0,left
      # SubLst will explode
      result = explode(left,xDepth+1)
      if type(result) is tuple:
        
    if willExplode(right,xDepth+1) 
    subLst = explode(x,depth+1)
    if 
  return
#end explode()

def split(x):
  if isinstance(x,list):
    left = x[0]
    right = x[1]
    if willSplit(left):
      return [ split(left), right ]
    else:
      return [ left, split(right) ]
    return [left,right]
  # Must be an int, since not a list
  if x >= 10:
    return [int(x/2),int((x+1)/2)]
#end split()


import ast
nums = []
for line in lines:
  nums.append(ast.literal_eval(line))
#end for



