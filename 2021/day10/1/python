#!/usr/bin/env python3
  
import sys

# Debug function
def debug(output):
  print(output)
#end debug()

# CLI arg, input file
if len(sys.argv) != 2:
  print("ERR: Expect =1 arg; the file containing input")
  exit(1)
#end if
try:
  with open(sys.argv[1], 'r') as input:
    lines = input.readlines()
except:
  print("ERR: Failed to open input file (%s)" % sys.argv[1])
  exit(1)
#end try

# Nuke those newlines
lines = [line.strip() for line in lines]

# Debug function, for easier printing
def print_r(lst):
  length_list = [len(str(element)) for row in lst for element in row]
  column_width = max(length_list)
  for row in lst:
    row = "".join(str(element).rjust(column_width + 2) for element in row)
    print(row)
#end print_r()


#
# The Meat

def checkCorrupted(line):
  pairs = {
    "(": ")",
    "{": "}",
    "[": "]",
    "<": ">"
  }
  openers = pairs.keys()
  closers = pairs.values()
  stack = []
  line = list(line)
  for char in line:
    if char in openers:
      stack.append(char)
      continue
    if char in closers:
      if char == pairs[stack.pop()]:
        continue
      else:
        tally[char] += 1
        return True
  return False
  #end for
#end checkCorrupted()

def score(tally):
  # ): 3 points.
  # ]: 57 points.
  # }: 1197 points.
  # >: 25137 points.
  total = 0
  total += tally[')']*3
  total += tally[']']*57
  total += tally['}']*1197
  total += tally['>']*25137
  print(total)
#end score()

tally = {}
tally[")"] = 0
tally["]"] = 0
tally["}"] = 0
tally[">"] = 0

for line in lines:
  checkCorrupted(line)

score(tally)


